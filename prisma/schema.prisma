// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // mongodb
  url      = env("DATABASE_URL")
}

model BusinessAccount {
  id            Int                        @id @default(autoincrement())
  firstName     String
  lastName      String?
  email         String                     @unique
  username      String                     @unique @default(uuid())
  phone         String?
  password      String
  salt          String
  emailVerified Boolean                    @default(false)
  phoneVerified Boolean                    @default(false)
  image         Image?                     @relation(fields: [imageId], references: [id])
  imageId       Int?                       @unique
  addresses     Address[]
  logs          Log[]
  stores        BusinessAccountsOnStores[]
  deleted       Boolean                    @default(false)
  deletedAt     DateTime?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
}

model BusinessAccountsOnStores {
  administer Boolean         @default(false)
  access     Json            @default("{}")
  account    BusinessAccount @relation(fields: [accountId], references: [id])
  accountId  Int
  store      Store           @relation(fields: [storeId], references: [id])
  storeId    Int
  assigned   Boolean         @default(true)
  assignedAt DateTime        @default(now())
  deleted    Boolean         @default(false)
  deletedAt  DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@id([storeId, accountId])
}

model Store {
  id         Int                        @id @default(autoincrement())
  name       String
  deck       String?
  slug       String                     @unique
  email      String?
  phone      String?
  tables     Int                        @default(0)
  additional Json                       @default("{}")
  addresses  Address                    @relation(fields: [addressId], references: [id])
  addressId  Int
  images     Image[]
  tags       Tag[]
  products   Product[]
  items      Item[]
  bills      Bill[]
  consumers  BusinessAccountsOnStores[]
  customers  PersonalAccountsOnStores[]
  expireAt   DateTime?
  deleted    Boolean                    @default(false)
  deletedAt  DateTime?
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
}

model PersonalAccountsOnStores {
  account    PersonalAccount @relation(fields: [accountId], references: [id])
  accountId  Int
  store      Store           @relation(fields: [storeId], references: [id])
  storeId    Int
  originated Boolean         @default(false)
  assigned   Boolean         @default(true)
  assignedAt DateTime        @default(now())
  deleted    Boolean         @default(false)
  deletedAt  DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@id([storeId, accountId])
}

model PersonalAccount {
  id            Int                        @id @default(autoincrement())
  firstName     String
  lastName      String?
  email         String?
  phone         String?
  username      String                     @unique @default(uuid())
  password      String?
  salt          String?
  emailVerified Boolean                    @default(false)
  phoneVerified Boolean                    @default(false)
  passwordAdded Boolean                    @default(false)
  image         Image?                     @relation(fields: [imageId], references: [id])
  imageId       Int?                       @unique
  addresses     Address[]
  logs          Log[]
  stores        PersonalAccountsOnStores[]
  deleted       Boolean                    @default(false)
  deletedAt     DateTime?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
}

model Address {
  id                Int              @id @default(autoincrement())
  line1             String
  line2             String?
  state             String
  county            String
  pincode           String
  position          Int              @default(1)
  personalAccount   PersonalAccount? @relation(fields: [personalAccountId], references: [id])
  personalAccountId Int?
  businessAccount   BusinessAccount? @relation(fields: [businessAccountId], references: [id])
  businessAccountId Int?
  stores            Store[]
  deleted           Boolean          @default(false)
  deletedAt         DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Image {
  id               Int              @id @default(autoincrement())
  caption          String?
  altText          String?
  content          String
  type             IMAGE_TYPE       @default(PUBLIC)
  position         Int              @default(1)
  product          Product?         @relation(fields: [productId], references: [id])
  productId        Int?
  businessAccount  BusinessAccount?
  personalAccounts PersonalAccount?
  deleted          Boolean          @default(false)
  deletedAt        DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tags             Tag[]
  store            Store?           @relation(fields: [storeId], references: [id])
  storeId          Int?
}

enum IMAGE_TYPE {
  BASE64
  PUBLIC
  S3
  PATH
  URL
  COLOR
}

model Tag {
  id        Int              @id @default(autoincrement())
  name      String
  deck      String?
  position  Int              @default(0)
  type      PRODUCT_TAG_TYPE @default(DEFAULT)
  image     Image?           @relation(fields: [imageId], references: [id])
  imageId   Int?
  store     Store            @relation(fields: [storeId], references: [id])
  storeId   Int
  products  Product[]
  deleted   Boolean          @default(false)
  deletedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum PRODUCT_TAG_TYPE {
  DEFAULT
  CATEGORY
}

model Product {
  id         Int       @id @default(autoincrement())
  name       String
  deck       String?
  price      Float     @default(0)
  outOfStock Boolean   @default(false)
  tags       Tag[]
  image      Image[]
  store      Store     @relation(fields: [storeId], references: [id])
  storeId    Int
  items      Item[]
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id        Int          @id @default(autoincrement())
  type      ORDER_TYPE   @default(TAKE_AWAY)
  status    ORDER_STATUS @default(DRAFT)
  table     Int          @default(0)
  notes     String?
  items     Item[]
  bills     Bill[]
  logs      Log[]
  deleted   Boolean      @default(false)
  deletedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum ORDER_TYPE {
  PRE_DINING
  DINING
  TAKE_AWAY
  PICK_UP
  DELIVERY
  PLATFORM
}

enum ORDER_STATUS {
  DRAFT
  PLACED
  ACCEPTED
  PROGRESS
  READY
  OUT_FOR_DELIVERY
  COMPLETED
}

model Log {
  id                Int              @id @default(autoincrement())
  content           Json             @default("{}")
  type              String           @default("UNKNOWN")
  order             Order?           @relation(fields: [orderId], references: [id])
  orderId           Int?
  account           BusinessAccount? @relation(fields: [accountId], references: [id])
  accountId         Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  PersonalAccount   PersonalAccount? @relation(fields: [personalAccountId], references: [id])
  personalAccountId Int?
}

model Item {
  id         Int         @id @default(autoincrement())
  title      String?
  note       String?
  price      Float       @default(0)
  quantity   Int         @default(0)
  total      Float       @default(0)
  position   Int         @default(0)
  interval   Int         @default(0)
  status     ITEM_STATUS @default(DRAFT)
  notes      String?
  startAfter DateTime    @default(now())

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  bill      Bill?   @relation(fields: [billId], references: [id])
  billId    Int?
  store     Store   @relation(fields: [storeId], references: [id])
  storeId   Int

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ITEM_STATUS {
  DRAFT
  PLACED
  ACCEPTED
  PROGRESS
  READY
  COMPLETED
}

model Bill {
  id             Int          @id @default(autoincrement())
  totalPrice     Float        @default(0)
  taxAmount      Float        @default(0)
  stateTaxAmount Float        @default(0)
  packagingFee   Float        @default(0)
  deliveryFee    Float        @default(0)
  grandTotal     Float        @default(0)
  note           String       @default("")
  billedAt       DateTime     @default(now())
  printedAt      DateTime?
  paidAt         DateTime?
  paidBy         BILL_PAID_BY @default(WALLET)
  orderType      ORDER_TYPE   @default(TAKE_AWAY)

  items   Item[]
  order   Order  @relation(fields: [orderId], references: [id])
  orderId Int
  store   Store  @relation(fields: [storeId], references: [id])
  storeId Int

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum BILL_PAID_BY {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  DUE
}

// Discount in product as fixed and percentage type with value
